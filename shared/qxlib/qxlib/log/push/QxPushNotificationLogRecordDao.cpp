#include "QxPushNotificationLogRecordDao.hpp"
#include <vector>

namespace {
std::vector<qx::PushNotificationLogRecord> s_recordQueue;
} // anonymous

template<> const bool QxBaseDao<qx::PushNotificationLogRecord>::autogeneratedPrimaryKey = true;
template<> const std::string QxBaseDao<qx::PushNotificationLogRecord>::tableName = "push_notification_log";
template<> const std::vector<std::string> QxBaseDao<qx::PushNotificationLogRecord>::columnNames = {
    "id", "session", "sequence_id", "timestamp", "call_id", "body"
};

template<>
QxBaseDao<qx::PushNotificationLogRecord>::variant QxBaseDao<qx::PushNotificationLogRecord>::primaryKey(const qx::PushNotificationLogRecord& u)
{
    return std::to_string(u.id);
}

template<>
void QxBaseDao<qx::PushNotificationLogRecord>::setPrimaryKey(qx::PushNotificationLogRecord *obj, const QxBaseDao<qx::PushNotificationLogRecord>::variant& key)
{
    obj->id = std::stoi(key);
}

template<>
void QxBaseDao<qx::PushNotificationLogRecord>::bind(SQLite::Statement& q, const qx::PushNotificationLogRecord& obj, bool skipPrimaryKey)
{
    if (!skipPrimaryKey) {
        q.bind(":id", obj.id);
    }
    q.bind(":session", static_cast<int>(obj.session));
    q.bind(":sequence_id", obj.sequenceId);
    q.bind(":timestamp", static_cast<int>(obj.time));
    q.bind(":call_id", obj.callId);
    q.bind(":body", obj.body);
}

template<>
void QxBaseDao<qx::PushNotificationLogRecord>::fillFromQuery(qx::PushNotificationLogRecord *obj, SQLite::Statement& record)
{
    obj->id = record.getColumn("id").getInt();
    obj->session = record.getColumn("session").getInt();
    obj->sequenceId = record.getColumn("sequence_id").getInt();
    obj->time = record.getColumn("timestamp").getInt();
    obj->callId = record.getColumn("call_id").getText();
    obj->body = record.getColumn("body").getText();
}

template<>
qx::PushNotificationLogRecord QxBaseDao<qx::PushNotificationLogRecord>::fromQuery(SQLite::Statement &record)
{
    qx::PushNotificationLogRecord obj;
    fillFromQuery(&obj, record);
    return obj;
}

namespace qx {

void PushNotificationLogRecordDao::insertToDatabaseOrQueue(const std::string &body, const std::string &callId)
{
    PushNotificationLogRecord record;
    record.session = qxlog::Logger::instance().sessionId();
    record.sequenceId = qxlog::Logger::instance().nextSequenceId();
    record.time = std::time(nullptr);
    record.callId = callId;
    record.body = body;

    if (LogDatabase::isDefaultInstanceOpen()) {
        insert(&record, LogDatabase::instance()->databaseConnection());
    } else {
        s_recordQueue.push_back(record);
    }
}

bool PushNotificationLogRecordDao::flushQueueToDatabase(SQLite::Database &db)
{
    bool error = false;
    for (auto& record: s_recordQueue) {
        int id = insert(&record, db);
        if (id < 1) {
            error = true;
        }
    }
    if (!error) {
        s_recordQueue.clear();
    }
    return !error;
}

} // namespace qx

