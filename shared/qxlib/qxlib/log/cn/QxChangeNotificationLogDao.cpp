#include "QxChangeNotificationLogDao.hpp"

qx::ChangeNotificationLogRecord::ChangeNotificationLogRecord() :
    id(0), session(0), sequenceId(0), time(0), status(UnprocessedStatus)
{
}

template<> const bool QxBaseDao<qx::ChangeNotificationLogRecord>::autogeneratedPrimaryKey = true;
template<> const std::string QxBaseDao<qx::ChangeNotificationLogRecord>::tableName = "cn_log";
template<> const std::vector<std::string> QxBaseDao<qx::ChangeNotificationLogRecord>::columnNames = {
    "id", "session", "sequence_id", "timestamp",
    "subject", "qliq_id", "feature", "json", "processing_status"
};

template<>
QxBaseDao<qx::ChangeNotificationLogRecord>::variant QxBaseDao<qx::ChangeNotificationLogRecord>::primaryKey(const qx::ChangeNotificationLogRecord& u)
{
    return std::to_string(u.id);
}

template<>
void QxBaseDao<qx::ChangeNotificationLogRecord>::setPrimaryKey(qx::ChangeNotificationLogRecord *obj, const QxBaseDao<qx::ChangeNotificationLogRecord>::variant& key)
{
    obj->id = std::stoi(key);
}

template<>
void QxBaseDao<qx::ChangeNotificationLogRecord>::bind(SQLite::Statement& q, const qx::ChangeNotificationLogRecord& obj, bool skipPrimaryKey)
{
    if (!skipPrimaryKey) {
        q.bind(":id", obj.id);
    }
    q.bind(":session", static_cast<int>(obj.session));
    q.bind(":sequence_id", obj.sequenceId);
    q.bind(":timestamp", static_cast<int>(obj.time));
    q.bind(":subject", obj.subject);
    q.bind(":qliq_id", obj.qliqId);
    q.bind(":feature", obj.feature);
    q.bind(":json", obj.json);
    q.bind(":processing_status", obj.status);
}

template<>
void QxBaseDao<qx::ChangeNotificationLogRecord>::fillFromQuery(qx::ChangeNotificationLogRecord *obj, SQLite::Statement& record)
{
    obj->id = record.getColumn("id").getInt();
    obj->session = record.getColumn("session").getInt();
    obj->sequenceId = record.getColumn("sequence_id").getInt();
    obj->time = record.getColumn("timestamp").getInt();
    obj->subject = record.getColumn("subject").getText();
    obj->qliqId = record.getColumn("qliq_id").getText();
    obj->feature = record.getColumn("feature").getText();
    obj->json = record.getColumn("json").getText();
    obj->status = static_cast<qx::ChangeNotificationLogRecord::ProcessingStatus>(record.getColumn("processing_status").getInt());
}

template<>
qx::ChangeNotificationLogRecord QxBaseDao<qx::ChangeNotificationLogRecord>::fromQuery(SQLite::Statement &record)
{
    qx::ChangeNotificationLogRecord obj;
    fillFromQuery(&obj, record);
    return obj;
}
