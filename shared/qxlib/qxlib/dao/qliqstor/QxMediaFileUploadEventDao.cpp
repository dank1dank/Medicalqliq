#include "QxMediaFileUploadEventDao.hpp"

template<> const bool QxBaseDao<qx::MediaFileUploadEvent>::autogeneratedPrimaryKey = true;
template<> const std::string QxBaseDao<qx::MediaFileUploadEvent>::tableName = "qx_media_file_upload_event";
template<> const std::vector<std::string> QxBaseDao<qx::MediaFileUploadEvent>::columnNames = {
    "id", "upload_id", "type", "timestamp", "message"
};

template<>
QxBaseDao<qx::MediaFileUploadEvent>::variant QxBaseDao<qx::MediaFileUploadEvent>::primaryKey(const qx::MediaFileUploadEvent& u)
{
    return std::to_string(u.databaseId);
}

template<>
void QxBaseDao<qx::MediaFileUploadEvent>::setPrimaryKey(qx::MediaFileUploadEvent *obj, const QxBaseDao<qx::MediaFileUploadEvent>::variant& key)
{
    obj->databaseId = std::stoi(key);
}

template<>
void QxBaseDao<qx::MediaFileUploadEvent>::bind(SQLite::Statement& q, const qx::MediaFileUploadEvent& obj, bool skipPrimaryKey)
{
    if (!skipPrimaryKey) {
        q.bind(":id", obj.databaseId);
    }
    q.bind(":upload_id", obj.uploadDatabaseId);
    q.bind(":type", obj.type);
    q.bind(":timestamp", static_cast<sqlite3_int64>(obj.timestamp));
    q.bind(":message", obj.message);
}

template<>
void QxBaseDao<qx::MediaFileUploadEvent>::fillFromQuery(qx::MediaFileUploadEvent *obj, SQLite::Statement& record)
{
    obj->databaseId = record.getColumn("id").getInt();
    obj->uploadDatabaseId = record.getColumn("upload_id").getInt();
    obj->type = static_cast<qx::MediaFileUploadEvent::Type>(record.getColumn("type").getInt());
    obj->timestamp = static_cast<std::time_t>(record.getColumn("timestamp").getInt64());
    obj->message = record.getColumn("message").getText();
}

template<>
qx::MediaFileUploadEvent QxBaseDao<qx::MediaFileUploadEvent>::fromQuery(SQLite::Statement &record)
{
    qx::MediaFileUploadEvent obj;
    fillFromQuery(&obj, record);
    return obj;
}

std::vector<qx::MediaFileUploadEvent> qx::MediaFileUploadEventDao::selectWithUploadId(int id)
{
    return selectBy(qx::MediaFileUploadEventDao::UploadIdColumn, std::to_string(id));
}
