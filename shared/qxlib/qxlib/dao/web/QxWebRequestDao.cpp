#include "QxWebRequestDao.hpp"

template<> const bool QxBaseDao<qx::WebRequest>::autogeneratedPrimaryKey = true;
template<> const std::string QxBaseDao<qx::WebRequest>::tableName = "qx_web_request";
template<> const std::vector<std::string> QxBaseDao<qx::WebRequest>::columnNames = {
    "id", "server_type", "path", "json", "uuid"
};

template<>
QxBaseDao<qx::WebRequest>::variant QxBaseDao<qx::WebRequest>::primaryKey(const qx::WebRequest& u)
{
    return std::to_string(u.databaseId);
}

template<>
void QxBaseDao<qx::WebRequest>::setPrimaryKey(qx::WebRequest *obj, const QxBaseDao<qx::WebRequest>::variant& key)
{
    obj->databaseId = std::stoi(key);
}

template<>
void QxBaseDao<qx::WebRequest>::bind(SQLite::Statement& q, const qx::WebRequest& obj, bool skipPrimaryKey)
{
    if (!skipPrimaryKey) {
        q.bind(":id", obj.databaseId);
    }
    q.bind(":server_type", static_cast<int>(obj.serverType));
    q.bind(":path", obj.path);
    q.bind(":json", obj.json);
    q.bind(":uuid", obj.uuid);
}

template<>
void QxBaseDao<qx::WebRequest>::fillFromQuery(qx::WebRequest *obj, SQLite::Statement& record)
{
    obj->databaseId = record.getColumn("id").getInt();
    obj->serverType = static_cast<qx::web::WebClient::ServerType>(record.getColumn("server_type").getInt());
    obj->path = record.getColumn("path").getText();
    obj->json = record.getColumn("json").getText();
    obj->uuid = record.getColumn("uuid").getText();
}

template<>
qx::WebRequest QxBaseDao<qx::WebRequest>::fromQuery(SQLite::Statement &record)
{
    qx::WebRequest obj;
    fillFromQuery(&obj, record);
    return obj;
}

namespace qx {

int WebRequestDao::insertOrUpdate(WebRequest *request, SQLite::Database &db)
{
    int id = 0;
    if (!request->uuid.empty()) {
        dao::Query q;
        q.append(UuidColumn, request->uuid);
        id = exists(q, db);
    }
    if (id != 0) {
        request->databaseId = id;
        QXLOG_INFO("Updating db web request(%d, %s) with new json", id, request->path.c_str());
        updateColumn(JsonColumn, request->json, *request, db);
    } else {
        id = QxBaseDao<WebRequest>::insert(request, db);
        QXLOG_INFO("Inserted db web request(%d, %s)", id, request->path.c_str());
    }
    return id;
}

void WebRequestDao::remove(int id, SQLite::Database &db)
{
    QXLOG_INFO("Removing db web request(%d)", id);
    delete_(IdColumn, std::to_string(id), db);
}

bool WebRequest::isEmpty() const
{
    return databaseId == 0;
}

} // qx
