#include "QxSipContactDao.hpp"

template<> const bool QxBaseDao<qx::SipContact>::autogeneratedPrimaryKey = false;
template<> const std::string QxBaseDao<qx::SipContact>::tableName = "sip_contact";
template<> const std::vector<std::string> QxBaseDao<qx::SipContact>::columnNames = {
    "contact_qliq_id", "private_key", "public_key", "type"
};

template<>
QxBaseDao<qx::SipContact>::variant QxBaseDao<qx::SipContact>::primaryKey(const qx::SipContact& u)
{
    return u.qliqId;
}

template<>
void QxBaseDao<qx::SipContact>::setPrimaryKey(qx::SipContact *obj, const QxBaseDao<qx::SipContact>::variant& key)
{
    obj->qliqId = key;
}

template<>
void QxBaseDao<qx::SipContact>::bind(SQLite::Statement& q, const qx::SipContact& mp, bool skipPrimaryKey)
{
    if (!skipPrimaryKey) {
        q.bind(":contact_qliq_id", mp.qliqId);
    }
    q.bind(":private_key", mp.privateKey);
    q.bind(":public_key", mp.publicKey);
    q.bind(":type", static_cast<int>(mp.type));
}

template<>
void QxBaseDao<qx::SipContact>::fillFromQuery(qx::SipContact *obj, SQLite::Statement& record)
{
    obj->qliqId = record.getColumn("contact_qliq_id").getText();
    obj->privateKey = record.getColumn("private_key").getText();
    obj->publicKey = record.getColumn("public_key").getText();
    obj->type = static_cast<qx::SipContact::Type>(record.getColumn("type").getInt());
}

template<>
qx::SipContact QxBaseDao<qx::SipContact>::fromQuery(SQLite::Statement &record)
{
    qx::SipContact obj;
    fillFromQuery(&obj, record);
    return obj;
}

bool qx::SipContactDao::deletePublicKey(const std::string &qliqId, SQLite::Database &db)
{
    qx::dao::UpdateColumns columns;
    columns[PublicKeyColumn] = "";

    qx::dao::WhereColumns where;
    where[QliqIdColumn] = qliqId;

    return update(columns, where, db);
}
