#include "FhirResourceDao.hpp"
#include "qxlib/dao/chat/QxMultipartyDao.hpp"
#include "qxlib/dao/QxQliqUserDao.hpp"

template<> const bool QxBaseDao<fhir::Patient>::autogeneratedPrimaryKey = true;
template<> const std::string QxBaseDao<fhir::Patient>::tableName = "fhir_patient";
template<> const std::vector<std::string> QxBaseDao<fhir::Patient>::columnNames = {
    "id", "uuid", "hl7id", "first_name", "middle_name", "last_name",
    "date_of_birth", "date_of_death", "deceased", "gender",
    "race", "phone_home", "phone_work", "email", "insurance", "address",
    "patient_account_number", "social_security_number", "drivers_license_number",
    "nationality", "language", "marital_status", "photo_data",
    "master_patient_index", "medical_record_number",
     "last_update_reason", "alternate_patient_id"
};

template<>
QxBaseDao<fhir::Patient>::variant QxBaseDao<fhir::Patient>::primaryKey(const fhir::Patient& u)
{
    return std::to_string(u.id);
}

template<>
void QxBaseDao<fhir::Patient>::setPrimaryKey(fhir::Patient *obj, const QxBaseDao<fhir::Patient>::variant& key)
{
    obj->id = std::stoul(key);
}

template<>
void QxBaseDao<fhir::Patient>::bind(SQLite::Statement& q, const fhir::Patient& u, bool skipPrimaryKey)
{
    if (!skipPrimaryKey) {
        q.bind(":id", std::to_string(u.id));
    }
    q.bind(":uuid", u.uuid);
    q.bind(":hl7id", u.hl7Id);
    q.bind(":alternate_patient_id", u.alternatePatientId);
    q.bind(":first_name", u.firstName);
    q.bind(":middle_name", u.middleName);
    q.bind(":last_name", u.lastName);
    q.bind(":date_of_birth", u.dateOfBirth);
    q.bind(":date_of_death", u.dateOfDeath);
    q.bind(":deceased", static_cast<int>(u.deceased));
    q.bind(":gender", static_cast<int>(u.gender));
    q.bind(":race", u.race);
    q.bind(":phone_home", u.phoneHome);
    q.bind(":phone_work", u.phoneWork);
    q.bind(":email", u.email);
    q.bind(":insurance", u.insurance);
    q.bind(":address", u.address);
    q.bind(":master_patient_index", u.masterPatientIndex);
    q.bind(":medical_record_number", u.medicalRecordNumber);
    q.bind(":patient_account_number", u.patientAccountNumber);
    q.bind(":social_security_number", u.socialSecurityNumber);
    q.bind(":drivers_license_number", u.driversLicenseNumber);
    q.bind(":nationality", u.nationality);
    q.bind(":language", u.language);
    q.bind(":marital_status", u.maritalStatus);
    q.bind(":photo_data", u.photo.data.c_str(), u.photo.data.size());
    q.bind(":last_update_reason", u.lastUpdateReason);
}

template<>
fhir::Patient QxBaseDao<fhir::Patient>::fromQuery(SQLite::Statement &record)
{
    fhir::Patient u;
    u.id = std::stoul(record.getColumn("id").getText());
    u.uuid = record.getColumn("uuid").getText();
    u.hl7Id = record.getColumn("hl7id").getText();
    u.alternatePatientId = record.getColumn("alternate_patient_id").getText();
    u.firstName = record.getColumn("first_name").getText();
    u.middleName = record.getColumn("middle_name").getText();
    u.lastName = record.getColumn("last_name").getText();
    u.dateOfBirth = record.getColumn("date_of_birth").getText();
    u.dateOfDeath = record.getColumn("date_of_death").getText();
    u.deceased = record.getColumn("deceased").getInt() == 1;
    u.gender = (fhir::Gender) record.getColumn("gender").getInt();
    u.race = record.getColumn("race").getText();
    u.phoneHome = record.getColumn("phone_home").getText();
    u.phoneWork = record.getColumn("phone_work").getText();
    u.email = record.getColumn("email").getText();
    u.insurance = record.getColumn("insurance").getText();
    u.address = record.getColumn("address").getText();
    u.masterPatientIndex = record.getColumn("master_patient_index").getText();
    u.medicalRecordNumber = record.getColumn("medical_record_number").getText();
    u.patientAccountNumber = record.getColumn("patient_account_number").getText();
    u.socialSecurityNumber = record.getColumn("social_security_number").getText();
    u.driversLicenseNumber = record.getColumn("drivers_license_number").getText();
    u.nationality = record.getColumn("nationality").getText();
    u.language = record.getColumn("language").getText();
    u.maritalStatus = record.getColumn("marital_status").getText();
    u.lastUpdateReason = record.getColumn("last_update_reason").getText();

    int size = record.getColumn("photo_data").getBytes();
    if (size > 0) {
        const char *ptr = record.getColumn("photo_data").getText();
        u.photo.data = std::string(ptr, size);
    }
    return u;
}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// Encounter

template<> const bool QxBaseDao<fhir::Encounter>::autogeneratedPrimaryKey = true;
template<> const std::string QxBaseDao<fhir::Encounter>::tableName = "fhir_encounter";
template<> const std::vector<std::string> QxBaseDao<fhir::Encounter>::columnNames = {
    "id", "uuid", "patient", "period_start", "period_end", "status",
    "location_point_of_care", "location_room", "location_bed", "location_facility", "location_building", "location_floor",
    "visit_number", "raw_json", "alternate_visit_id", "preadmit_number", "last_update_reason"
};

template<>
QxBaseDao<fhir::Encounter>::variant QxBaseDao<fhir::Encounter>::primaryKey(const fhir::Encounter& obj)
{
    return std::to_string(obj.id);
}

template<>
void QxBaseDao<fhir::Encounter>::setPrimaryKey(fhir::Encounter *obj, const QxBaseDao<fhir::Encounter>::variant& key)
{
    obj->id = std::stoul(key);
}

template<>
void QxBaseDao<fhir::Encounter>::bind(SQLite::Statement& q, const fhir::Encounter& obj, bool skipPrimaryKey)
{
    if (!skipPrimaryKey) {
        q.bind(":id", std::to_string(obj.id));
    }
    q.bind(":uuid", obj.uuid);
    q.bind(":patient", std::to_string(obj.patient.id));
    q.bind(":period_start", obj.periodStart);
    q.bind(":period_end", obj.periodEnd);
    q.bind(":status", obj.status);
    q.bind(":location_point_of_care", obj.location.pointOfCare);
    q.bind(":location_room", obj.location.room);
    q.bind(":location_bed", obj.location.bed);
    q.bind(":location_facility", obj.location.facility);
    q.bind(":location_building", obj.location.building);
    q.bind(":location_floor", obj.location.floor);
    q.bind(":visit_number", obj.visitNumber);
    q.bind(":alternate_visit_id", obj.alternateVisitId);
    q.bind(":preadmit_number", obj.preadmitNumber);
    q.bind(":last_update_reason", obj.lastUpdateReason);
    q.bind(":raw_json", obj.rawJson);
}

template<>
fhir::Encounter QxBaseDao<fhir::Encounter>::fromQuery(SQLite::Statement& record)
{
    fhir::Encounter u;
    u.id = std::stoul(record.getColumn("id").getText());
    u.uuid = record.getColumn("uuid").getText();
    u.patient.id = record.getColumn("patient").getInt();
    u.periodStart = record.getColumn("period_start").getText();
    u.periodEnd = record.getColumn("period_end").getText();
    u.status = record.getColumn("status").getInt();
    u.location.pointOfCare = record.getColumn("location_point_of_care").getText();
    u.location.room = record.getColumn("location_room").getText();
    u.location.bed = record.getColumn("location_bed").getText();
    u.location.facility = record.getColumn("location_facility").getText();
    u.location.building = record.getColumn("location_building").getText();
    u.location.floor = record.getColumn("location_floor").getText();
    u.visitNumber = record.getColumn("visit_number").getText();
    u.alternateVisitId = record.getColumn("alternate_visit_id").getText();
    u.preadmitNumber = record.getColumn("preadmit_number").getText();
    u.lastUpdateReason = record.getColumn("last_update_reason").getText();
    u.rawJson = record.getColumn("raw_json").getText();
    return u;
}

namespace fhir {

void EncounterDao::loadChildren(fhir::Encounter *encounter)
{
    encounter->patient = fhir::PatientDao::selectOneBy(fhir::PatientDao::IdColumn, std::to_string(encounter->patient.id));
}

std::set<Participant> ParticipantsDao::selectByMultipartyQliqId(const std::string& qliqId)
{
    std::set<Participant> ret;
    qx::Multiparty mp = qx::MultipartyDao::selectOneBy(qx::MultipartyDao::QliqIdColumn, qliqId);
    if (!mp.isEmpty()) {
        for (const auto& member: mp.participants) {
            qx::QliqUser u = qx::QliqUserDao::selectOneBy(qx::QliqUserDao::QliqIdColumn, member.qliqId);
            if (!u.isEmpty()) {
                fhir::Participant p;
                p.doctor = Practitioner(u);
                p.setTypeFromText(member.role);
                ret.insert(p);
            }
        }
    }
    return ret;
}

} // namespace fhir
