//
// Prefix header for all source files of the 'qliqConnect' target in the 'qliqConnect' project
//

#import <Availability.h>

#ifndef __IPHONE_3_0
#warning "This project uses features only available in iOS SDK 3.0 and later."
#endif

#ifdef __OBJC__
#import <UIKit/UIKit.h>
#import <Foundation/Foundation.h>
#import <CoreFoundation/CoreFoundation.h>
#import <CoreText/CoreText.h>
#import "Constants.h"
#import "Log.h"
#import "UIKitAdditions.h"
#import "dispatch_additions.h"
#import "NSOperationQueues_Additions.h"
#import "QliqToolkit.h"
#import "SVProgressHUD.h"
#import "UIAlertView+MKNetworkKitAdditions.h"
#import "UserSessionService.h"
#import "QliqBaseViewController.h"
//#import "UIView+qliq.h"

#import "QliqAlertView.h"
#import "QliqAvatar.h"
#import "QliqAccess.h"
#import "QliqHelper.h"
#import "QliqMacros.h"
#import "QliqDefines.h"
#import "QliqStorage.h"

#import "QliqGroupDBService.h"

#import <LocalAuthentication/LocalAuthentication.h>

#import "AppDelegate.h"
extern AppDelegate *appDelegate;

#define isIPhoneX if ([[UIDevice currentDevice] platformType] == UIDeviceXiPhone || [[UIDevice currentDevice] isIphoneXSimulator])
//#define isiPad if (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)
#define isiPad (UI_USER_INTERFACE_IDIOM() == UIUserInterfaceIdiomPad)

typedef enum {
    ContactFieldTypeText = 0,
    ContactFieldTypeList,
    ContactFieldTypePhone,
    ContactFieldTypeEmail
} ContactFieldType;

typedef void(^VoidBlock)(void);

CG_INLINE CGSize CGSizeForUIInterfaceOrientation(UIInterfaceOrientation orientation)
{
    CGSize screenSize = [UIScreen mainScreen].bounds.size;
    switch (orientation) {
            
        case UIInterfaceOrientationPortrait:
        case UIInterfaceOrientationPortraitUpsideDown:
            if (screenSize.width > screenSize.height)
                screenSize = CGSizeMake(screenSize.height, screenSize.width);
            break;
        case UIInterfaceOrientationLandscapeLeft:
        case UIInterfaceOrientationLandscapeRight:
        case UIInterfaceOrientationUnknown:
            if (screenSize.height > screenSize.width)
                screenSize = CGSizeMake(screenSize.height, screenSize.width);
            break;
    }
    
    return screenSize;
}

CG_INLINE BOOL isValidEmail(NSString *emailString) {
    
    BOOL stricterFilter = NO; // Discussion http://blog.logichigh.com/2010/09/02/validating-an-e-mail-address/
    NSString *stricterFilterString = @"[A-Z0-9a-z._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,5}";
    NSString *laxString = @".+@.+\\.[A-Za-z]{2}[A-Za-z]*";
    NSString *emailRegex = stricterFilter ? stricterFilterString : laxString;
    NSPredicate *emailTest = [NSPredicate predicateWithFormat:@"SELF MATCHES %@", emailRegex];
    return [emailTest evaluateWithObject:emailString];
}

CG_INLINE BOOL isValidPhone(NSString *phone) {
    
    NSError *error = nil;
    NSDataDetector *detector = [NSDataDetector dataDetectorWithTypes:NSTextCheckingTypePhoneNumber error:&error];
    NSUInteger matches = [detector numberOfMatchesInString:phone options:NSMatchingReportCompletion range:NSMakeRange(0, phone.length)];
    return (matches != 0);
}

CG_INLINE NSString* formatPhoneNumber(NSString *phoneNumber){
    
    static NSCharacterSet* set = nil;
    if (set == nil){
        set = [[NSCharacterSet decimalDigitCharacterSet] invertedSet];
    }
    
    NSString* phoneString = [[phoneNumber componentsSeparatedByCharactersInSet:set] componentsJoinedByString:@""];
    switch (phoneString.length) {
        case 6: return [NSString stringWithFormat:@"%@ %@", [phoneString substringToIndex:3], [phoneString substringFromIndex:3]];
        case 7: return [NSString stringWithFormat:@"%@ %@", [phoneString substringToIndex:3], [phoneString substringFromIndex:3]];
        case 8: return [NSString stringWithFormat:@"%@ %@", [phoneString substringToIndex:3], [phoneString substringFromIndex:3]];
        case 9: return [NSString stringWithFormat:@"%@ %@ %@", [phoneString substringToIndex:3], [phoneString substringWithRange:NSMakeRange(3, 3)], [phoneString substringFromIndex:6]];
        case 10: return [NSString stringWithFormat:@"%@ %@ %@", [phoneString substringToIndex:3], [phoneString substringWithRange:NSMakeRange(3, 3)], [phoneString substringFromIndex:6]];
        case 11: return [NSString stringWithFormat:@"(%@) %@ %@ %@", [phoneString substringToIndex:1], [phoneString substringWithRange:NSMakeRange(1, 3)], [phoneString substringWithRange:NSMakeRange(4, 3)], [phoneString substringFromIndex:7]];
        case 12: return [NSString stringWithFormat:@"+(%@) %@ %@ %@", [phoneString substringToIndex:2], [phoneString substringWithRange:NSMakeRange(2, 3)], [phoneString substringWithRange:NSMakeRange(5, 3)], [phoneString substringFromIndex:8]];
        default: return phoneString;
    }
}

CG_INLINE BOOL is_4_inch()
{
    if( 568.f == [ UIScreen mainScreen ].bounds.size.height )
        return YES;
    return NO;
}

CG_INLINE BOOL is_ios_greater_or_equal_10()
{
    float systemVersion = [[[UIDevice currentDevice] systemVersion] floatValue];
    if (systemVersion >= 10.00)
        return YES;
    else
        return NO;
}

CG_INLINE BOOL is_ios_greater_or_equal_9()
{
    float systemVersion = [[[UIDevice currentDevice] systemVersion] floatValue];
    if (systemVersion > 8.99)
        return YES;
    else
        return NO;
}


CG_INLINE BOOL is_biometrics_are_available()
{
    LAContext *authenticationContext = [[LAContext alloc] init];
    return [authenticationContext canEvaluatePolicy:LAPolicyDeviceOwnerAuthenticationWithBiometrics error:NULL];
}

/**
 Color
 */
#define RGBa(r,g,b,a) [UIColor colorWithRed:r/255.0f green:g/255.0f blue:b/255.0f alpha:a]

#define kColorAvatarBackground  RGBa(38.f, 91.f, 153.f, 1.f);
#define kColorAvatarTittle      RGBa(189.f, 204.f, 223.f, 1.f);
#define kQliqBlueColor          RGBa(3.f, 120.f, 173.f, 1.f);

#define kColorLightBlue RGBa(42., 200., 254., 1)
#define kColorDarkBlue  RGBa(3., 120., 173., 1.)

/* Color End */


/**
 Link
 */
#define kLinkRegistration @"https://www.qliqsoft.com/get-started/"

/* Link End */


/**
 Notification
 */


/* Notification End */

//#define NSLog(__FORMAT__, ...) TFLog((@"%s [Line %d] " __FORMAT__), __PRETTY_FUNCTION__, __LINE__, ##__VA_ARGS__)

#define kShowProgressHUDNotificationName            @"ShowProgressHUDNotificationName"
#define kHideProgressHUDNotificationName            @"HideProgressHUDNotificationName"
#define kDeviceLockStatusChangedNotificationName    @"DeviceLockStatusChangedNotificationName"
#define kUIAlertViewHideButtonIndex                 1024

//Keyboard shortcuts
#define keyboardSizeFromNotification(notification) [[[notification userInfo] objectForKey:UIKeyboardFrameEndUserInfoKey]CGRectValue].size

#define keyboardHeightFromNotification(notification) (UIInterfaceOrientationIsPortrait([[UIApplication sharedApplication] statusBarOrientation]) ? \
keyboardSizeFromNotification(notification).height : \
keyboardSizeFromNotification(notification).width)

#define keyboardAnimationFromNotification(notification) [[[notification userInfo] objectForKey:UIKeyboardAnimationDurationUserInfoKey] floatValue]
#define keyboardAnimationCurveFromNotification(notification) [[[notification userInfo] objectForKey:UIKeyboardAnimationCurveUserInfoKey] integerValue]

#define kKeyboardHeight (UIInterfaceOrientationIsLandscape([[UIApplication sharedApplication] statusBarOrientation]) ? 162.0f : 216.0f)
#define kScreenHeight   (UIInterfaceOrientationIsLandscape([[UIApplication sharedApplication] statusBarOrientation]) ? [UIScreen mainScreen].bounds.size.width : [UIScreen mainScreen].bounds.size.height)
#define kDecryptedDirectory [NSString stringWithFormat:@"%@Decrypted/",NSTemporaryDirectory()]

#define userInfoWithDescription(description) [NSDictionary dictionaryWithObjects:[NSArray arrayWithObject:description]	 \
                                                                                                forKeys:[NSArray arrayWithObject:NSLocalizedDescriptionKey]]
#define errorDomainForModule(moduleName) [NSString stringWithFormat:@"com.qliq.%@",moduleName]
#define errorCurrentDomain [NSString stringWithFormat:@"com.qliq.%@",NSStringFromClass([self class])]

// system wide pasteboard
//#define UIPasteboardNameQliq UIPasteboardNameGeneral
// qliq private pasteboard
#define UIPasteboardNameQliq @"com.qliq.pastboard"
#endif

//Disable functional
#define InviteEnabled 1

//Logs settings
#define LogReachablity           1
#define LogMKNetworkRequestFails 0
//..

//#define DEBUG TRUE;
//#define NO_DB_ENCRYPTION

#ifdef DEBUG
#define kHockeyDebugEnabled
//#define NO_DB_ENCRYPTION
//#define TEST_ACCOUNT_PASSWORD @"start123"
#define CAN_CREATE_TEST_DATA
#else  
#	define TTDLog(...)
#endif

// TTRLog always displays output regardless of the DEBUG setting
//#define TTRLog(fmt, ...) NSLog((@"" fmt " (%s:%d)"), ##__VA_ARGS__, __PRETTY_FUNCTION__, __LINE__)

#define kLoginResponseShowResetPasswordAlertKey     @"temp_password"
#define kLoginResponseShowAlertKey                  @"show_alert"
#define kLoginResponseShowInviteAlert               @"invite"
#define kLoginResponseShowResendAlert               @"invite_action"
#define kLoginResponseShowProfileAlert              @"profile"
#define kLoginResponseShowSoundSettings             @"sound_settings"

//#define kShowSignUpButton                           @"shouldShowSignUp"
#define kShowInviteAlertOnceLoggedInKey             @"shouldRemindToInvite"
#define kShowResendInvitationsAlertOnceLoggedIn     @"shouldRemindAboutPendingInvitations"
#define kShowEditProfileAlertOnceLoggedIn           @"shouldRemindAboutEditProfile"
#define kShowSoundSettings                          @"shouldShowSoundSettings"
#define kShowCreateNewConversation                  @"shouldShowCreateNewConversation"
#define kShowEnableNotificationsAlert               @"shouldShowEnableNotificationsAlert"


#define kLastLoggedIn                               @"lastLoggedInDate"
#define kLoginWithPin                               @"loginWithPin"

#define kDidShowedCurtainViewNotification @"DidShowedCurtainViewNotification"
#define kShowCurtainViewNotification @"ShowCurtainViewNotification"
#define kShowOnCallGroupsNotification @"ShowOnCallGroupsNotification"

#define kOpenPDFNotification @"OpenPDFNotification"
#define kRemoveMediaFileAndAttachmentNotification @"RemoveMediaFileAndAttachmentNotification"

//DB
#define dbCanNotBeOpenErrorCode @"123123"

#define kUploadToQliqSTORKey @"uploadToQliqSTORKey"

//#endif
